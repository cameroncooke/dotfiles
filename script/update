#!/usr/bin/env bash\n#\n# update\n#\n# Updates all dotfiles components - run this periodically to keep everything fresh\n\ncd \"$(dirname \"$0\")/..\"\nDOTFILES_ROOT=$(pwd -P)\n\nset -e\n\necho ''\necho '  \ud83d\udd04 Updating Dotfiles...'\necho ''\n\ninfo () {\n  printf \"\\r  [ \\033[00;34m..\\033[0m ] $1\\n\"\n}\n\nsuccess () {\n  printf \"\\r\\033[2K  [ \\033[00;32mOK\\033[0m ] $1\\n\"\n}\n\nuser () {\n  printf \"\\r  [ \\033[0;33m??\\033[0m ] $1\\n\"\n}\n\nfail () {\n  printf \"\\r\\033[2K  [\\033[0;31mFAIL\\033[0m] $1\\n\"\n  echo ''\n  exit 1\n}\n\n# Update dotfiles repository\ninfo 'updating dotfiles repository'\nif git pull origin main; then\n  success 'dotfiles repository updated'\nelse\n  user 'could not update dotfiles repository (check git status)'\nfi\n\n# Ensure Homebrew is in PATH\nif [[ \"$(uname -m)\" == \"arm64\" ]] && [[ -f \"/opt/homebrew/bin/brew\" ]]; then\n  eval \"$(/opt/homebrew/bin/brew shellenv)\"\nelif [[ -f \"/usr/local/bin/brew\" ]]; then\n  eval \"$(/usr/local/bin/brew shellenv)\"\nfi\n\n# Update Homebrew\nif command -v brew &> /dev/null; then\n  info 'updating homebrew'\n  brew update && brew upgrade && brew cleanup\n  success 'homebrew updated'\n  \n  info 'updating homebrew bundle'\n  if brew bundle --file=\"$DOTFILES_ROOT/Brewfile\"; then\n    success 'homebrew bundle updated'\n  else\n    user 'some homebrew packages may have failed to update'\n  fi\nelse\n  user 'homebrew not found, skipping homebrew updates'\nfi\n\n# Update Oh My Zsh\nif [ -d \"$HOME/.oh-my-zsh\" ]; then\n  info 'updating oh-my-zsh'\n  cd \"$HOME/.oh-my-zsh\"\n  git pull || user 'could not update oh-my-zsh'\n  cd \"$DOTFILES_ROOT\"\n  success 'oh-my-zsh updated'\nfi\n\n# Update Powerlevel10k\nif [ -d \"$HOME/.oh-my-zsh/custom/themes/powerlevel10k\" ]; then\n  info 'updating powerlevel10k'\n  cd \"$HOME/.oh-my-zsh/custom/themes/powerlevel10k\"\n  git pull || user 'could not update powerlevel10k'\n  cd \"$DOTFILES_ROOT\"\n  success 'powerlevel10k updated'\nfi\n\n# Update zsh plugins\nif [ -d \"$HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions\" ]; then\n  info 'updating zsh-autosuggestions'\n  cd \"$HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions\"\n  git pull || user 'could not update zsh-autosuggestions'\n  cd \"$DOTFILES_ROOT\"\nfi\n\nif [ -d \"$HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting\" ]; then\n  info 'updating zsh-syntax-highlighting'\n  cd \"$HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting\"\n  git pull || user 'could not update zsh-syntax-highlighting'\n  cd \"$DOTFILES_ROOT\"\nfi\n\n# Update NVM\nif [ -d \"$HOME/.nvm\" ]; then\n  info 'updating nvm'\n  cd \"$HOME/.nvm\"\n  git fetch --tags origin\n  git checkout `git describe --abbrev=0 --tags --match \"v[0-9]*\" $(git rev-list --tags --max-count=1)` || user 'could not update nvm'\n  cd \"$DOTFILES_ROOT\"\n  success 'nvm updated'\nfi\n\n# Update global npm packages\nif command -v npm &> /dev/null; then\n  info 'updating global npm packages'\n  npm update -g || user 'some npm packages may have failed to update'\n  success 'global npm packages updated'\nfi\n\n# Update Ruby gems\nif command -v gem &> /dev/null; then\n  info 'updating ruby gems'\n  gem update || user 'some gems may have failed to update'\n  success 'ruby gems updated'\nfi\n\n# Re-link dotfiles (in case any new symlinks were added)\ninfo 'relinking dotfiles'\nfor src in $(find -H \"$DOTFILES_ROOT\" -maxdepth 2 -name '*.symlink' -not -path '*.git*')\ndo\n  dst=\"$HOME/.$(basename \"${src%.*}\")\"\n  if [ ! -L \"$dst\" ] || [ \"$(readlink \"$dst\")\" != \"$src\" ]; then\n    ln -sf \"$src\" \"$dst\"\n    echo \"   linked $src to $dst\"\n  fi\ndone\nsuccess 'dotfiles relinked'\n\necho ''\necho '  \u2728 Update Complete! \u2728'\necho ''\necho '  Run \"source ~/.zshrc\" to reload your shell configuration'\necho ''