#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

echo ''
echo '  ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ  ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñà‚ñà‚ñì ‚ñà‚ñà‚ñì    ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà '
echo '  ‚ñí‚ñà‚ñà‚ñÄ ‚ñà‚ñà‚ñå‚ñí‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñí‚ñì  ‚ñà‚ñà‚ñí ‚ñì‚ñí‚ñì‚ñà‚ñà   ‚ñí‚ñì‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà‚ñí    ‚ñì‚ñà   ‚ñÄ ‚ñí‚ñà‚ñà    ‚ñí '
echo '  ‚ñë‚ñà‚ñà   ‚ñà‚ñå‚ñí‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí‚ñí ‚ñì‚ñà‚ñà‚ñë ‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà ‚ñë‚ñí‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñë    ‚ñí‚ñà‚ñà‚ñà   ‚ñë ‚ñì‚ñà‚ñà‚ñÑ   '
echo '  ‚ñë‚ñì‚ñà‚ñÑ   ‚ñå‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñë‚ñë ‚ñì‚ñà‚ñà‚ñì ‚ñë ‚ñë‚ñì‚ñà‚ñí  ‚ñë‚ñë‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñë    ‚ñí‚ñì‚ñà  ‚ñÑ   ‚ñí   ‚ñà‚ñà‚ñí'
echo '  ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñì ‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë  ‚ñí‚ñà‚ñà‚ñí ‚ñë ‚ñë‚ñí‚ñà‚ñë   ‚ñë‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí'
echo '   ‚ñí‚ñí‚ñì  ‚ñí ‚ñë ‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë   ‚ñí ‚ñë‚ñë    ‚ñí ‚ñë   ‚ñë‚ñì  ‚ñë ‚ñí‚ñë‚ñì  ‚ñë‚ñë‚ñë ‚ñí‚ñë ‚ñë‚ñí ‚ñí‚ñì‚ñí ‚ñí ‚ñë'
echo '   ‚ñë ‚ñí  ‚ñí   ‚ñë ‚ñí ‚ñí‚ñë     ‚ñë     ‚ñë      ‚ñí ‚ñë‚ñë ‚ñë ‚ñí  ‚ñë ‚ñë ‚ñë  ‚ñë‚ñë ‚ñë‚ñí  ‚ñë ‚ñë'
echo '   ‚ñë ‚ñë  ‚ñë ‚ñë ‚ñë ‚ñë ‚ñí    ‚ñë       ‚ñë ‚ñë    ‚ñí ‚ñë  ‚ñë ‚ñë      ‚ñë   ‚ñë  ‚ñë  ‚ñë  '
echo '     ‚ñë        ‚ñë ‚ñë                   ‚ñë      ‚ñë  ‚ñë   ‚ñë  ‚ñë      ‚ñë  '
echo ''
echo '  Welcome to dotfiles installation!'
echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit 1
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.local.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

    success 'gitconfig'
  fi
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

check_prerequisites () {
  info 'checking prerequisites'
  
  # Check for Xcode Command Line Tools on macOS
  if [ "$(uname -s)" == "Darwin" ]; then
    if ! xcode-select -p &> /dev/null; then
      fail "Xcode Command Line Tools are required. Run: xcode-select --install"
    fi
  fi
  
  # Check for curl
  if ! command -v curl &> /dev/null; then
    fail "curl is required but not installed"
  fi
  
  # Check for git
  if ! command -v git &> /dev/null; then
    fail "git is required but not installed"
  fi
  
  success 'prerequisites ok'
}

install_homebrew () {
  info 'installing homebrew'
  
  # Ensure Homebrew is in PATH for this session
  if [[ "$(uname -m)" == "arm64" ]] && [[ -f "/opt/homebrew/bin/brew" ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
  elif [[ -f "/usr/local/bin/brew" ]]; then
    eval "$(/usr/local/bin/brew shellenv)"
  fi
  
  if ! command -v brew &> /dev/null; then
    info "Homebrew not found, installing..."
    if $DOTFILES_ROOT/homebrew/install.sh; then
      # Re-source Homebrew environment
      if [[ "$(uname -m)" == "arm64" ]] && [[ -f "/opt/homebrew/bin/brew" ]]; then
        eval "$(/opt/homebrew/bin/brew shellenv)"
      elif [[ -f "/usr/local/bin/brew" ]]; then
        eval "$(/usr/local/bin/brew shellenv)"
      fi
      success "Homebrew installed"
    else
      fail "Failed to install Homebrew"
    fi
  else
    success "Homebrew already installed"
  fi
}

install_oh_my_zsh () {
  info 'installing oh-my-zsh and plugins'
  
  if $DOTFILES_ROOT/zsh/install-oh-my-zsh.sh; then
    success "oh-my-zsh installed"
  else
    user "Warning: oh-my-zsh installation had issues"
  fi
}

install_fonts () {
  info 'installing powerline fonts'
  
  if $DOTFILES_ROOT/fonts/install.sh; then
    success "fonts installed"
  else
    user "Warning: font installation had issues"
  fi
}

install_dependencies () {
  info 'installing dependencies'
  
  # Run the dot script
  if source bin/dot; then
    success "dependencies installed"
  else
    user "Warning: some dependencies may have failed to install"
  fi
}

run_installers () {
  info 'running component installers'
  
  # Find all install.sh scripts and run them (excluding homebrew and script directories)
  find "$DOTFILES_ROOT" -name install.sh -not -path "*/script/*" -not -path "*/homebrew/*" | sort | while read installer; do
    local component=$(basename $(dirname "$installer"))
    echo "   Running ${component} installer..."
    if sh -c "${installer}"; then
      echo "   ‚úì ${component} completed"
    else
      echo "   ‚ö† ${component} had issues"
    fi
  done
  
  success 'component installers completed'
}

validate_installation () {
  info 'validating installation'
  
  local issues=0
  
  # Check critical tools
  if ! command -v brew &> /dev/null; then
    echo "   ‚ö† Homebrew not found in PATH"
    issues=$((issues + 1))
  fi
  
  if [ ! -d "$HOME/.oh-my-zsh" ]; then
    echo "   ‚ö† Oh My Zsh not installed"
    issues=$((issues + 1))
  fi
  
  if [ ! -d "$HOME/.oh-my-zsh/custom/themes/powerlevel10k" ]; then
    echo "   ‚ö† Powerlevel10k theme not installed"
    issues=$((issues + 1))
  fi
  
  if [ ! -f "$HOME/Library/Fonts/MesloLGS NF Regular.ttf" ]; then
    echo "   ‚ö† Powerlevel10k fonts not installed"
    issues=$((issues + 1))
  fi
  
  if [ $issues -eq 0 ]; then
    success 'validation passed'
  else
    user "validation completed with $issues issues"
  fi
}

post_install_message () {
  echo ''
  echo '  ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñë‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà '
  echo ' ‚ñí‚ñà‚ñà   ‚ñí‚ñì  ‚ñà‚ñà‚ñí ‚ñì‚ñí‚ñì‚ñà   ‚ñÄ '
  echo ' ‚ñí‚ñà‚ñà‚ñà‚ñà ‚ñë‚ñí ‚ñì‚ñà‚ñà‚ñë ‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà   '
  echo ' ‚ñì‚ñà‚ñí  ‚ñë‚ñë ‚ñì‚ñà‚ñà‚ñì ‚ñë ‚ñí‚ñì‚ñà  ‚ñÑ '
  echo ' ‚ñë‚ñí‚ñà‚ñë   ‚ñë  ‚ñí‚ñà‚ñà‚ñí ‚ñë ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí'
  echo '  ‚ñí ‚ñë     ‚ñí ‚ñë‚ñë   ‚ñë‚ñë ‚ñí‚ñë ‚ñë'
  echo '  ‚ñë       ‚ñë      ‚ñë ‚ñë  ‚ñë'
  echo '  ‚ñë     ‚ñë        ‚ñë    '
  echo ''
  echo '  ‚ú® Installation Complete! ‚ú®'
  echo ''
  echo '  üöÄ Next Steps:'
  echo '  1. Restart your terminal or run: source ~/.zshrc'
  echo '  2. Configure iTerm2 to use "MesloLGS NF" font (Preferences ‚Üí Profiles ‚Üí Text ‚Üí Font)'
  echo '  3. Run "p10k configure" to customize your Powerlevel10k prompt'
  echo '  4. Edit ~/.localrc to add your local environment variables'
  echo '  5. If any components failed, check the specific error messages above'
  echo ''
  echo '  üõ†  Available Commands:'
  echo '  - dot: Update dependencies and configurations'
  echo '  - script/bootstrap: Re-run this installation'
  echo '  - brew bundle: Install/update Homebrew packages'
  echo '  - p10k configure: Configure Powerlevel10k theme'
  echo ''
  echo '  üìù Documentation:'
  echo '  - Dotfiles README: ~/.dotfiles/README.md'
  echo '  - Local config: ~/.localrc'
  echo '  - Zsh config: ~/.zshrc'
  echo ''
}

# Main installation flow
check_prerequisites
setup_gitconfig
install_homebrew
install_oh_my_zsh
install_fonts
install_dotfiles

# If we're on a Mac, let's install and setup homebrew packages
if [ "$(uname -s)" == "Darwin" ]; then
  install_dependencies
fi

# Run all component installers
run_installers

# Validate installation
validate_installation

# Show completion message
post_install_message
