# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Amazon Q pre block. Keep at the top of this file.
[[ -f "${HOME}/Library/Application Support/amazon-q/shell/zshrc.pre.zsh" ]] && builtin source "${HOME}/Library/Application Support/amazon-q/shell/zshrc.pre.zsh"
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
#if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
#fi

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
# ZSH_THEME="agnoster"
if [[ "$TERM_PROGRAM" == "iTerm.app" ]]; then
    ZSH_THEME="powerlevel10k/powerlevel10k"
    # Only source p10k config for iTerm
    [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
else
    ZSH_THEME="robbyrussell"
fi

#powerlevel9k settings
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(root_indicator dir vcs)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(swift_version rbenv nvm ssh)
POWERLEVEL9K_PROMPT_ON_NEWLINE=true
POWERLEVEL9K_RBENV_ALWAYS=true
POWERLEVEL9K_RBENV_PROMPT_ALWAYS_SHOW=true
POWERLEVEL9K_VCS_GIT_HOOKS=(vcs-detect-changes git-untracked git-aheadbehind git-remotebranch git-tagname)
POWERLEVEL9K_VCS_SHORTEN_LENGTH=20
POWERLEVEL9K_VCS_SHORTEN_MIN_LENGTH=30
POWERLEVEL9K_VCS_SHORTEN_STRATEGY="truncate_middle"
POWERLEVEL9K_VCS_SHORTEN_DELIMITER=".."
typeset -g POWERLEVEL10K_TERM_SHELL_INTEGRATION=true

# Disable hostname info when logged in as me
DEFAULT_USER="cameroncooke"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Disable auto-update prompt
DISABLE_UPDATE_PROMPT=true

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git brew xcode fasd dircycle jsontools zsh-autosuggestions zsh-syntax-highlighting)

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

# your project folder that we can `c [tab]` to
export PROJECTS=/Voumes/Developer

ZSH_DISABLE_COMPFIX="true"

# Load Oh My Zsh
source $ZSH/oh-my-zsh.sh

# Enable fish-style syntax highlighting
# source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

# Path to the Zsh folder of dotfiles
export DOTFILES_ZSH=$HOME/.dotfiles

# all of our zsh files
typeset -U config_files
config_files=($DOTFILES_ZSH/**/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the install script
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit
compinit

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

# danger
export DANGER_GITHUB_API_TOKEN=""

unset config_files

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

source $HOME/.git-flow-completion.zsh

# export PATH="/usr/local/Cellar:$HOME/.rvm/bin:$PATH" # Add RVM to PATH for scripting - Commented out, Homebrew path is /opt/homebrew and rvm is handled by .zlogin or mise
# export PATH="/usr/local/opt/python/libexec/bin:$PATH" # Commented out, brew shellenv should handle this
export PATH="$HOME/.local/bin:$PATH"
export PATH=~/.npm-global/bin:$PATH
# export PATH="/Users/cameroncooke/Library/Python/3.9/bin:$PATH" # Commented out, potentially conflicts with Homebrew/mise managed Python
export PATH="/Users/cameroncooke/Developer/xcodemake:$PATH"

export AWS_PROFILE_ALIASES=true

# export GRAPHVIZ_DOT="/opt/homebrew/Cellar/graphviz/2.48.0/bin/dot" # Commented out, hardcoded path

#eval "$(rbenv init -)"
#eval "$(pyenv init -)"

if which swiftenv > /dev/null; then eval "$(swiftenv init -)"; fi
# export PATH="/opt/homebrew/opt/ruby/bin:$PATH" # Commented out, brew shellenv or mise should handle this if needed

# export PATH="/opt/homebrew/Cellar/python@3.11/3.11.6_1/bin/:$PATH" # Commented out, hardcoded path and brew shellenv should handle

# Load copilot CLI aliases
if [[ -f "${DOTFILES_ZSH}/git/github-copilot-cli-aliases.inc" ]]; then
  source "${DOTFILES_ZSH}/git/github-copilot-cli-aliases.inc"
else
  echo >&2 "WARNING: can't load copilot aliases"
fi

alias git-upstream='git branch --set-upstream-to=origin/$(git branch --show-current)'
alias git-reset-origin='git reset --hard origin/$(git branch --show-current)'

# The next line updates PATH for the Google Cloud SDK.
# if [ -f '/Users/cameron/Downloads/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/cameron/Downloads/google-cloud-sdk/path.zsh.inc'; fi # Commented out, incorrect user

# The next line enables shell command completion for gcloud.
# if [ -f '/Users/cameron/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/cameron/Downloads/google-cloud-sdk/completion.zsh.inc'; fi # Commented out, incorrect user

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Added by Windsurf - Next
export PATH="/Users/cameroncooke/.codeium/windsurf/bin:$PATH"

# Added by Windsurf
export PATH="/Users/cameroncooke/.codeium/windsurf/bin:$PATH"

# Disable pagers in non-interactive environments or unsupported terminals
if [[ -t 1 ]] && [[ "$TERM_PROGRAM" =~ ^(Apple_Terminal|ghostty|WarpTerminal|iTerm.app)$ ]]; then
    # Enable bat features in supported interactive terminals
    export BAT_STYLE="full"
else
    # Disable all pagers for pipes, scripts, and AI tools
    export BAT_PAGER=""
    export PAGER="cat"
    export GIT_PAGER="cat"
    export MANPAGER="cat"
    # Optional: Add other tool-specific pager overrides here
    # export DELTA_PAGER="cat"
fi

PATH="/Users/cameroncooke/perl5/bin${PATH:+:${PATH}}"; export PATH;
PERL5LIB="/Users/cameroncooke/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/Users/cameroncooke/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/Users/cameroncooke/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/Users/cameroncooke/perl5"; export PERL_MM_OPT;
export PATH="/opt/homebrew/bin:$PATH"

# Amazon Q post block. Keep at the bottom of this file.
[[ -f "${HOME}/Library/Application Support/amazon-q/shell/zshrc.post.zsh" ]] && builtin source "${HOME}/Library/Application Support/amazon-q/shell/zshrc.post.zsh"
